/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fourcolor;

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.AffineTransform;
import java.awt.geom.Path2D;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

/**
 *
 * Copyright 2012 Kyle Falconer
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * @author Kyle Falconer
 */
public class mFrame extends javax.swing.JFrame implements ActionListener, MouseMotionListener {

    protected static App backEnd;
    protected static String[] stateNames;
    protected static Color[] stateColors;
    protected int MACRO_WIDTH = 0;
    protected int MACRO_HEIGHT = 0;
    protected HashMap<Color, JRadioButton> rButtons;

    /**
     * Creates new form mFrame
     */
    public mFrame() {
        backEnd = new App();
        String filename = "Census, State Government Tax Collections, USA, 2007.kml";
        backEnd.getPlacemarks(filename);
        stateNames = backEnd.getStateList();
        Arrays.sort(stateNames);
        for (String s:stateNames){
            System.out.println(s+" ");
        }
        
        
        stateColors = backEnd.getColors();
        initComponents();
        final mFrame aThis = this;
        for (int i = 0; i < stateNames.length; i++) {
            jComboBox1.addItem(stateNames[i].toString());
            jComboBox1.addActionListener(aThis);

        }
        rButtons = new HashMap<Color, JRadioButton>();
        JRadioButton[] tempB = {jRadioButton1, jRadioButton2, jRadioButton3, jRadioButton4};
        int i = 0;
        for (JRadioButton b : tempB) {
            tempB[i].addActionListener(aThis);
            rButtons.put(stateColors[i], tempB[i]);
            i++;
        }



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new PaintControls();
        jComboBox1 = new javax.swing.JComboBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MessageLabel = new javax.swing.JTextArea();
        canvas1 = new EarthCanvas();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 800));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 200));
        jPanel2.setMinimumSize(new java.awt.Dimension(100, 200));
        jPanel2.setPreferredSize(new java.awt.Dimension(516, 200));

        jRadioButton1.setText("Color 1");

        jRadioButton2.setText("Color 2");

        jRadioButton3.setText("Color 3");

        jRadioButton4.setText("Color 4");

        MessageLabel.setColumns(10);
        MessageLabel.setEditable(false);
        MessageLabel.setRows(5);
        jScrollPane1.setViewportView(MessageLabel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBox1, 0, 128, Short.MAX_VALUE)
                        .addGap(23, 23, 23))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                        .addGap(23, 23, 23))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                        .addGap(23, 23, 23))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addGap(26, 26, 26))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addContainerGap())
        );

        canvas1.setBackground(javax.swing.UIManager.getDefaults().getColor("CheckBox.light"));
        canvas1.setMinimumSize(new java.awt.Dimension(500, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(canvas1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
            .addComponent(canvas1, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>                        

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new mFrame().setVisible(true);
            }
        });

    }
    // Variables declaration - do not modify                     
    protected javax.swing.JTextArea MessageLabel;
    private java.awt.Canvas canvas1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration                   

    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        borderRecolor(source);
        stateRecolor(source);
        canvas1.repaint();
    }

    public void mouseDragged(MouseEvent e) {
        //not implemented
    }

    public void borderRecolor(Object source) {
        if (source instanceof JComboBox) {
            String selectedState = (String) jComboBox1.getSelectedItem();
            setRadioButtonToStateColor(selectedState);
            backEnd.setStateBorderColor(selectedState, Color.magenta);
            backEnd.resetBorderColor((String) jComboBox1.getSelectedItem());
        }
    }

    public void stateRecolor(Object source) {
        if (source instanceof JRadioButton) {
            JRadioButton JCBsource = (JRadioButton) source;
            String selectedRadio = JCBsource.getText();
            Integer chosenC = Integer.parseInt("" + selectedRadio.charAt(JCBsource.getText().length() - 1));
            Color changeTo = stateColors[chosenC - 1];
            String selectedState = (String) jComboBox1.getSelectedItem();
            backEnd.setStateColor(selectedState, changeTo);
            clearRadioButtons();
            JCBsource.setSelected(true);
            
            ArrayList<String> conflicts = backEnd.checkColorConflict(selectedState);
            
            if (conflicts!=null){
                System.out.print(conflicts.toString());
                StringBuilder message = new StringBuilder();
                message.append("This state conflicts\nwith the following\nstate colors:\n\n");
                Iterator conflictingI = conflicts.iterator();
                while (conflictingI.hasNext()){
                    message.append(conflictingI.next().toString()+"\n");
                }
                MessageLabel.setText(message.toString());
            } else {
                MessageLabel.setText("No conflicts for\nthis state.");
            }
        }
    }

    private void clearRadioButtons() {
        Iterator bI = rButtons.values().iterator();
        while (bI.hasNext()) {
            ((JRadioButton) bI.next()).setSelected(false);
        }
    }

    private void setRadioButtonToStateColor(String s) {
        clearRadioButtons();
        JRadioButton get = rButtons.get(((Color) backEnd.getStateColor(s)));
        get.setSelected(true);
    }

    public void mouseMoved(MouseEvent e) {
        // throw new UnsupportedOperationException("Not supported yet.");
        Object source = e.getSource();
        borderRecolor(source);
        canvas1.repaint();
    }

    class EarthCanvas extends Canvas implements ActionListener {

        EarthCanvas() {
            super();
        }

        @Override
        public void paint(Graphics g) {
            Graphics2D g2d = (Graphics2D) g;

            int[] dimensions = {1200, 800};
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.clearRect(0, 0, dimensions[0], dimensions[1]);

            for (String s : stateNames) {
                HashSet<Path2D> LandMasses = backEnd.getStatePolygons(s);
                Iterator massIterator = LandMasses.iterator();
                while (massIterator.hasNext()) {
                    Path2D temp = (Path2D) massIterator.next();

                    AffineTransform newAf = new AffineTransform(18.0f, 0.0f, 0.0f, 27.0f, 2250.0f, 1400.0f);
                    newAf.rotate((3 * Math.PI) / 2);
                    g2d.setTransform(newAf);
                    g2d.setClip(temp);
                    g2d.setColor(backEnd.getStateColor(s));
                    g2d.fill(temp);
                    g2d.setPaint(backEnd.getStateColor(s));
                    g2d.setStroke(new BasicStroke(.9f));
                    g2d.draw(temp);
                }
            }


        }

        public void actionPerformed(ActionEvent e) {
        }
    }

    class PaintControls extends JPanel {

        PaintControls() {
        }
    }
}
